39-4
innodb---xtradb
percona-server
使用Xtrabackup进行MySQL备份：

一、安装
1、简介
Xtrabackup是由percona提供的mysql数据库备份工具，据官方介绍，这也是世界上惟一一款开源的能够对innodb和xtradb数据库进行热备的工具。特点：
(1)备份过程快速、可靠；
(2)备份过程不会打断正在执行的事务；
(3)能够基于压缩等功能节约磁盘空间和流量；
(4)自动实现备份检验；
(5)还原速度快；
2、安装过程
       1) 从官网http://www.percona.com/software/percona-xtrabackup/下载对应版本的percona-xtrabackup
       2）yum install -y percona-xtrabackup 只能针对centos7，因为其epel源里面有对应的rpm包；centos6不行
二、备份的实现
1、完全备份
innobackupex是xtrabackup的封装版，使用更简单
innobackupex --user=DBUSER --password=DBUSERPASS  /path/to/BACKUP-DIR/   此处指定的目录不需求事先创建，该命令会自己创建。此处在备份所有数据库
如果要使用一个最小权限的用户进行备份，则可基于如下命令创建此类用户：
mysql> CREATE USER ’bkpuser’@’localhost’ IDENTIFIED BY ’s3cret’; 其实这时候什么权限也没有
mysql> REVOKE ALL PRIVILEGES, GRANT OPTION FROM ’bkpuser'@'localhost';（取消所有权限）
mysql> GRANT RELOAD, LOCK TABLES, REPLICATION CLIENT ON *.* TO ’bkpuser’@’localhost’;（授权部分权限）
mysql> FLUSH PRIVILEGES;
mysql> show grants for  'bkpuser'@'localhost';
+--------------------------------------------------------------------------------------------------------------------------------------------------+
| Grants for bkpuser@localhost                                                                                                                     |
+--------------------------------------------------------------------------------------------------------------------------------------------------+
| GRANT RELOAD, LOCK TABLES, REPLICATION CLIENT ON *.* TO 'bkpuser'@'localhost' IDENTIFIED BY PASSWORD '*B865CAE8F340F6CE1485A06F4492BB49718DF1EC' |
+--------------------------------------------------------------------------------------------------------------------------------------------------+
1 row in set (0.00 sec)

使用innobakupex备份时，其会调用xtrabackup备份所有的InnoDB表，复制所有关于表结构定义的相关文件(.frm)、以及MyISAM、MERGE、CSV和ARCHIVE表的相关文件，
同时还会备份触发器和数据库配置信息相关的文件。这些文件会被保存至一个以时间命名的目录中。

在备份的同时，innobackupex还会在备份目录中创建如下文件：
(1)xtrabackup_checkpoints —— 备份类型（如完全或增量）、备份状态（如是否已经为prepared状态）和LSN(日志序列号)范围信息；
每个InnoDB页(通常为16k大小)都会包含一个日志序列号，即LSN。LSN是整个数据库系统的系统版本号，每个页面相关的LSN能够表明此页面最近是如何发生改变的。
(2)xtrabackup_binlog_info —— mysql服务器当前正在使用的二进制日志文件及至备份这一刻为止二进制日志事件的位置。
(3)xtrabackup_binlog_pos_innodb —— 二进制日志文件及用于InnoDB或XtraDB表的二进制日志文件的当前position。
(4)xtrabackup_binary —— 备份中用到的xtrabackup的可执行文件；
(5)backup-my.cnf —— 备份命令用到的配置选项信息；
在使用innobackupex进行备份时，还可以使用--no-timestamp选项来阻止命令自动创建一个以时间命名的目录；如此一来，innobackupex命令将会创建一个BACKUP-DIR目录来存储备份数据。

2、准备(prepare)一个完全备份
   补充注意事项：
1）服务在启动前，必须确保innodb_file_per_table=on，即确保每一张innodb表单独使用一个表空间存储数据和索引。否则无法实现单独备份某一个库中的一张表。
2）一般情况下，在备份完成后，数据尚且不能用于恢复操作，因为备份的数据中可能会包含尚未提交的事务或已经提交但尚未同步至数据文件中的事务。此时数据文件仍处理不一致状态     
3）“准备”的主要作用正是通过回滚未提交的事务及同步已经提交的事务至数据文件中，也就是使数据文件处于一致性状态。所以备份的时候除了备份数据，还要备份事务日志，非常重要
4）xtrabackup只支持innodb的完全备份和增量备份。对于myisam引擎，实际上只支持完全备份，增量备份实际上也是完全备份。
innobakupex命令的--apply-log选项可用于实现上述功能。如下面的命令：
# innobackupex --apply-log  /path/to/BACKUP-DIR（该命令完成上述说明的准备动作）
如果执行正确，其最后输出的几行信息通常如下：
xtrabackup: starting shutdown with innodb_fast_shutdown = 1
120407  9:01:36  InnoDB: Starting shutdown...
120407  9:01:40  InnoDB: Shutdown completed; log sequence number 92036620
120407 09:01:40  innobackupex: completed OK!
在实现“准备”的过程中，innobackupex通常还可以使用--use-memory选项来指定其可以使用的内存的大小，默认通常为100M。
如果有足够的内存可用，可以多划分一些内存给prepare的过程，以提高其完成速度。

3、从一个完全备份中恢复数据 
注意：恢复不用启动MySQL
innobackupex命令的--copy-back选项用于执行恢复操作，其通过复制所有数据相关的文件至mysql服务器DATADIR目录中来执行恢复过程。
innobackupex通过backup-my.cnf来获取DATADIR目录的相关信息。

# innobackupex --copy-back  /path/to/BACKUP-DIR（这一步要指定详细的目录）
如果执行正确，其输出信息的最后几行通常如下：
innobackupex: Starting to copy InnoDB log files
innobackupex: in '/backup/2012-04-07_08-17-03'
innobackupex: back to original InnoDB log directory '/mydata/data'
innobackupex: Finished copying back files.
120407 09:36:10  innobackupex: completed OK!
请确保如上信息的最行一行出现“innobackupex: completed OK!”。
当数据恢复至DATADIR目录以后，还需要确保所有数据文件的属主和属组均为正确的用户，如mysql，否则，在启动mysqld之前还需要事先修改数据文件的属主和属组。如：
# chown -R  mysql:mysql  /mydata/data/
 
4、使用innobackupex进行增量备份
每个InnoDB的页面都会包含一个LSN信息，每当相关的数据发生改变，相关的页面的LSN就会自动增长。这正是InnoDB表可以进行增量备份的基础，
即innobackupex的增量备份通过备份上次完全备份之后发生改变的页面来实现。

要实现第一次增量备份，可以使用下面的命令进行：
# innobackupex --incremental /backup --incremental-basedir=BASEDIR	
要告知此次增量备份是针对哪一次完全备份或者增量备份来的，非常重要
其中，BASEDIR指的是完全备份所在的目录，此命令执行结束后，innobackupex命令会在/backup目录中创建一个新的以时间命名的目录以存放所有的增量备份数据。
另外，在执行过增量备份之后再一次进行增量备份时，其--incremental-basedir应该指向上一次的增量备份所在的目录。
注意：增量备份仅能应用于InnoDB或XtraDB表，对于MyISAM表而言，执行增量备份时其实进行的是完全备份。

“准备”(prepare)增量备份与整理完全备份有着一些不同，尤其要注意的是：
(1)需要在每个备份(包括完全和各个增量备份)上，将已经提交的事务进行“重放”。“重放”之后，所有的备份数据将合并到完全备份上。
(2)基于所有的备份将未提交的事务进行“回滚”。
于是，操作就变成了：
# innobackupex --apply-log --redo-only BASE-DIR
接着执行：
# innobackupex --apply-log --redo-only BASE-DIR --incremental-dir=INCREMENTAL-DIR-1
而后是第二个增量：
# innobackupex --apply-log --redo-only BASE-DIR --incremental-dir=INCREMENTAL-DIR-2
其中BASE-DIR指的是完全备份所在的目录，而INCREMENTAL-DIR-1指的是第一次增量备份的目录，INCREMENTAL-DIR-2指的是第二次增量备份的目录，
其它依次类推，即如果有多次增量备份，每一次都要执行如上操作；


完全备份的具体操作步骤：
备份节点
  1)systemctl start mariadb.service 因为要通过mysqldump连接到mysql服务，所以要确保服务在线
    grant all on *.* to 'root'@'localhost' identified by 'chenhao@'
    grant all on *.* to 'root'@'192.168.139.%' identified by 'chenhao@'
  2)innobackupex  --user=root --password=chenhao@  /backup (/backup是备份路径,而且此处是在备份所有数据库）
  3)innobackupex  --apply-log /backpup/2017-06-21_22-51-24/
  4)scp -r /backup/2017-06-21_22-51-24    192.168.139.181:/tmp (/backup/2017-06-21_22-51-24是步骤2产生的文件）
192.168.139.181恢复节点
  1)systemctl stop  mariadb.service  此时一定要关闭mysql服务
  2)rm -rf /var/lib/mysql/*(清除恢复节点已经存在的数据文件）
  3)innobackupex  --copy-back  /tmp/2017-06-21_22-51-24/   程序会根据配置文件把文件复制到指定的datadir目录内，所以/etc/my.cnf内的datadir要明确写出来
  4)ll /var/lib/mysql/(查看数据库目录下是否已经有相关文件）
  5)chown -R mysql:mysql  /var/lib/mysql/*(否则mysql服务启动不了）
  6)systemctl start  mariadb.service（连入msyql数据库，看数据是否已经正常恢复）

补充说明：
如果在恢复节点执行systemctl start  mariadb.service出现错误，请执行如下命令
[root@localhost ~]# tail -f /var/log/mariadb/mariadb.log
InnoDB: Error: log file ./ib_logfile0 is of different size 0 50331648 bytes ---发现是ib_logfile0太大
InnoDB: than specified in the .cnf file 0 5242880 bytes!
InnoDB: Possible causes for this error:
[root@localhost ~]# ll -h  /var/lib/mysql/  
-rw-r----- 1 mysql mysql  48M Sep 10 08:41 ib_logfile0
-rw-r----- 1 mysql mysql  48M Sep 10 08:41 ib_logfile1
[root@localhost ~]# rm -f  /var/lib/mysql/ib_logfile*
[root@localhost ~]# systemctl start  mariadb.service 此时服务如果可以正常启动说明配置成功


完全备份+增量备份的具体操作步骤：
   先确保上面的完全备份是正常的
   备份节点
  1)systemctl start mariadb.service 
  2)innobackupex  --user=root --password=chenhao@  /backup (/backup是备份路径）
  3)连入mysql数据库，可以做很多操作
  3)innobackupex  --user=root --password=chenhao@  --incremental  /backup   --incremental-basedir=/backup/2017-06-21_22-51-24 
    （此处的/backuo/2017-06-21_22-51-24是在步骤2中做完全备份产生的目录）
  4)cat /backup/2017-06-21_22-51-24/xtrabackup_checkpoints 
     backup_type = full-backuped(必须是full-backuped）
     from_lsn = 0
     to_lsn = 1747023
     last_lsn = 1747023
     compact = 0
     recover_binlog_info = 0
   5)cat /backup/2017-06-21_23-14-20/xtrabackup_checkpoints 
     backup_type = incremental（必须是incremental）
     from_lsn = 1747023
     to_lsn = 1747318
     last_lsn = 1747318
     compact = 0
   7)innobackupex  --user=root --password=chenhao@  --apply-log --redo-only /backup/2017-06-21_22-51-24
   8)innobackupex  --user=root --password=chenhao@  --apply-log --redo-only /backup/2017-06-21_22-51-24  --incremental-dir=/backup/2017-06-21_23-14-20 
   9)cat /backup/2017-06-21_22-51-24/xtrabackup_checkpoints 
     backup_type = log-applied
     from_lsn = 0
     to_lsn = 1747318(查看lsn是否是最新的）
     last_lsn = 1747318
     compact = 0
     recover_binlog_info = 0
   10)scp /backup/2017-06-21_22-51-24  192.168.139.181:/tmp/ 
      或者innobackupex --copy-back /backup/2017-06-21_22-51-24  
  恢复节点
  1)systemctl stop  mariadb.service 
  2)rm -rf /var/lib/mysql/*(清除恢复节点已经存在的数据）
  3)innobackupex  --copy-back  /tmp/2017-06-21_22-51-24/
  4)ll /var/lib/mysql/(查看数据库目录下是否已经有相关文件）
  5)chown -R mysql:mysql  /var/lib/mysql/*(否则mysql服务启动不了）
  6)systemctl start  mariadb.service（连入msyql数据库，看数据是否已经正常恢复)
说明：
   具体操作过程仔细些	 
   操作时每次增量备份都是在完全备份的基础上进行，所以假如周日做全量备份，1-6做增量备份，则恢复时只需要1-6中的任何一次增量备份+周日的全量备份即可，仔细理解


其他补充说明：
5、Xtrabackup的“流”及“备份压缩”功能
Xtrabackup对备份的数据文件支持“流”功能，即可以将备份的数据通过STDOUT传输给tar程序进行归档，而不是默认的直接保存至某备份目录中。
要使用此功能，仅需要使用--stream选项即可。如：
innobackupex --stream=tar  /backup | gzip > /backup/`date +%F_%H-%M-%S`.tar.gz
甚至也可以使用类似如下命令将数据备份至其它服务器：
innobackupex --stream=tar  /backup |gzip| ssh user@www.magedu.com  "cat -  > /backup/`date +%F_%H-%M-%S`.tar.gz" 
此外，在执行本地备份时，还可以使用--parallel选项对多个文件进行并行复制。此选项用于指定在复制时启动的线程数目。当然，在实际进行备份时要利用此功能的便利性，
也需要启用innodb_file_per_table选项或共享的表空间通过innodb_data_file_path选项存储在多个ibdata文件中。对某一数据库的多个文件的复制无法利用到此功能。其简单使用方法如下：
# innobackupex --parallel  /path/to/backup
同时，innobackupex备份的数据文件也可以存储至远程主机，这可以使用--remote-host选项来实现：
# innobackupex --remote-host=root@www.magedu.com  /path/IN/REMOTE/HOST/to/backup


6、导入或导出单张表(不常用）
默认情况下，InnoDB表不能通过直接复制表文件的方式在mysql服务器之间进行移植，即便使用了innodb_file_per_table选项。而使用Xtrabackup工具可以实现此种功能，
不过，此时需要“导出”表的mysql服务器启用了innodb_file_per_table选项（严格来说，是要“导出”的表在其创建之前，mysql服务器就启用了innodb_file_per_table选项），
并且“导入”表的服务器同时启用了innodb_file_per_table和innodb_expand_import选项。

(1)“导出”表
导出表是在备份的prepare阶段进行的，因此，一旦完全备份完成，就可以在prepare过程中通过--export选项将某表导出了：
# innobackupex --apply-log --export /path/to/backup
此命令会为每个innodb表的表空间创建一个以.exp结尾的文件，这些以.exp结尾的文件则可以用于导入至其它服务器。
(2)“导入”表
要在mysql服务器上导入来自于其它服务器的某innodb表，需要先在当前服务器上创建一个跟原表表结构一致的表，而后才能实现将表导入：
mysql> CREATE TABLE mytable (...)  ENGINE=InnoDB;
然后将此表的表空间删除：
mysql> ALTER TABLE mydatabase.mytable  DISCARD TABLESPACE;(也就是删除tblname.ibd表）
接下来，将来自于“导出”表的服务器的mytable表的mytable.ibd和mytable.exp文件复制到当前服务器的数据目录，然后使用如下命令将其“导入”：
mysql> ALTER TABLE mydatabase.mytable  IMPORT TABLESPACE;
7、使用Xtrabackup对数据库进行部分备份（不常用）
Xtrabackup也可以实现部分备份，即只备份某个或某些指定的数据库或某数据库中的某个或某些表。但要使用此功能，必须启用innodb_file_per_table选项，
即每张表保存为一个独立的文件。同时，其也不支持--stream选项，即不支持将数据通过管道传输给其它程序进行处理。
此外，还原部分备份跟还原全部数据的备份也有所不同，即你不能通过简单地将prepared的部分备份使用--copy-back选项直接复制回数据目录，而是要通过导入表的方向来实现还原。当然，有些情况下，部分备份也可以直接通过--copy-back进行还原，但这种方式还原而来的数据多数会产生数据不一致的问题，因此，无论如何不推荐使用这种方式。
(1)创建部分备份
创建部分备份的方式有三种：正则表达式(--include), 枚举表文件(--tables-file)和列出要备份的数据库(--databases)。
(a)使用--include
使用--include时，要求为其指定要备份的表的完整名称，即形如databasename.tablename，如：
# innobackupex --include='^mageedu[.]tb1'  /path/to/backup
(b)使用--tables-file
此选项的参数需要是一个文件名，此文件中每行包含一个要备份的表的完整名称；如：
# echo -e 'mageedu.tb1\nmageedu.tb2' > /tmp/tables.txt
# innobackupex --tables-file=/tmp/tables.txt  /path/to/backup
(c)使用--databases
此选项接受的参数为数据名，如果要指定多个数据库，彼此间需要以空格隔开；同时，在指定某数据库时，也可以只指定其中的某张表。此外，此选项也可以接受一个文件为参数，
文件中每一行为一个要备份的对象。如：
# innobackupex --databases="mageedu testdb"  /path/to/backup
(2)整理(preparing)部分备份
prepare部分备份的过程类似于导出表的过程，要使用--export选项进行：
# innobackupex --apply-log --export  /pat/to/partial/backup
此命令执行过程中，innobackupex会调用xtrabackup命令从数据字典中移除缺失的表，因此，会显示出许多关于“表不存在”类的警告信息。
同时，也会显示出为备份文件中存在的表创建.exp文件的相关信息。
(3)还原部分备份
还原部分备份的过程跟导入表的过程相同。当然，也可以通过直接复制prepared状态的备份直接至数据目录中实现还原，不要此时要求数据目录处于一致状态。
